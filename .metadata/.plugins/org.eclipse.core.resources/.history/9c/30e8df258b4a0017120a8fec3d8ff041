package com.test;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class Demo {
	public static void main(String[] args) {
		TreeNode t1 = new TreeNode(1);
		TreeNode t2 = new TreeNode(2);
		TreeNode t3 = new TreeNode(3);
		TreeNode t4 = new TreeNode(4);
		TreeNode t5 = new TreeNode(5);
		TreeNode t6 = new TreeNode(6);
		t1.left = t2;
		t1.right = t3;
		t2.left = t4;
		t2.right = t5;
		t3.right = t6;
		/*
		 * System.out.println(getNumRec(t1));//1.1
		 * System.out.println(getNodeNum(t1));//1.2
		 * System.out.println(getDepthRec(t1)); //2 preOrder(t1);//3.1
		 * System.out.println(); preorderTraversal(t1); System.out.println();
		 * inOrder(t1); //3.2 System.out.println(); postOrder(t1);//3.3
		 * System.out.println(); levelTraversal(t1); //4 convert1(t1);
		 * 
		 * TreeNode tmp = convertBST2DLL(t1); while (true) { if (tmp == null) {
		 * break; } System.out.print(tmp.val + " "); if (tmp.right == null) {
		 * break; } tmp = tmp.right; }
		 */
		// System.out.println(getNodeNumLeafRec(t1));//7.1
		// System.out.println(isAVLRec(t1));
		// System.out.println(getLastCommonParentRec(t1, t4, t5).val);//11.1
		// System.out.println(getLastCommonParentRec2(t1, t4, t5).val);// 11.2

		System.out.println(getMaxDistanceRec(t4).maxDistance);
	}

	/*
	 * 1.1 求二叉树中的节点个数递归解法： O(n) （1）如果二叉树为空，节点个数为0 （2）如果二叉树不为空，二叉树节点个数 = 左子树节点个数
	 * + 右子树节点个数 + 1
	 */
	public static int getNumRec(TreeNode root) {
		if (root == null)
			return 0;
		else
			return getNumRec(root.left) + getNumRec(root.right) + 1;
	}

	/**
	 * 1.2 求二叉树中的节点个数迭代解法O(n)：基本思想同LevelOrderTraversal，
	 * 即用一个Queue，在Java里面可以用LinkedList来模拟
	 */
	public static int getNodeNum(TreeNode root) {
		if (root == null)
			return 0;
		int count = 1;
		Queue<TreeNode> queue = new LinkedList<TreeNode>();
		queue.add(root);
		while (!queue.isEmpty()) {
			TreeNode cur = queue.remove();// 从队头位置移除
			if (cur.left != null) {
				queue.add(cur.left);// 如果有左孩子，加到队尾
				count++;
			}
			if (cur.right != null) {
				queue.add(cur.right);// 如果有右孩子，加到队尾
				count++;
			}
		}
		return count;
	}
	/*
	 * 2求二叉树深度，递归解法O(n) (1)如果为空，则返回0 （2）如果不为空，二叉树深度为max（左子树深度，右子树深度）+1
	 */

	public static int getDepthRec(TreeNode root) {
		if (root == null)
			return 0;
		int leftDepth = getDepthRec(root.left);
		int rightDepth = getDepthRec(root.right);
		return Math.max(leftDepth, rightDepth) + 1;
	}

	// 3.1 前序遍历递归解法
	public static void preOrder(TreeNode root) {
		if (root == null)
			return;
		else {
			System.out.print(root.val + " ");
			preOrder(root.left);
			preOrder(root.right);
		}
	}

	// 3.1前序遍历迭代解法
	public static void preorderTraversal(TreeNode root) {
		if (root == null) {
			return;
		}

		Stack<TreeNode> stack = new Stack<TreeNode>(); // 辅助stack
		stack.push(root);

		while (!stack.isEmpty()) {
			TreeNode cur = stack.pop(); // 出栈栈顶元素
			System.out.print(cur.val + " ");

			// 关键点：要先压入右孩子，再压入左孩子，这样在出栈时会先打印左孩子再打印右孩子
			if (cur.right != null) {
				stack.push(cur.right);
			}
			if (cur.left != null) {
				stack.push(cur.left);
			}
		}
	}

	// 3.2中序遍历递归解法
	public static void inOrder(TreeNode root) {
		if (root == null)
			return;
		else {
			inOrder(root.left);
			System.out.print(root.val + " ");
			inOrder(root.right);
		}
	}

	// 3.3 后序遍历递归解法
	public static void postOrder(TreeNode root) {
		if (root == null)
			return;
		else {
			postOrder(root.left);
			postOrder(root.right);
			System.out.print(root.val + " ");
		}
	}

	// 4分层遍历二叉树，迭代解法。traversal意为遍历
	public static void levelTraversal(TreeNode root) {
		if (root == null)
			return;
		else {
			LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
			queue.push(root);// 根结点入队
			while (!queue.isEmpty()) {
				TreeNode cur = queue.removeFirst();// 将队头的数移出打印
				System.out.print(cur.val + " ");
				if (cur.left != null)// 如果移出的数的左孩子存在，则先进队
					queue.add(cur.left);
				if (cur.right != null)// 如果移出的数的又孩子也存在，则也跟着进队，保证了每层是从左到右遍历
					queue.add(cur.right);
			}
		}
	}

	/*
	 * 5.1将二叉查找树变为有序的双向链表 要求不能创建新节点，只调整指针.root会在链表的中间位置，因此要手动 把root移到链表头或链表尾
	 * 递归解法
	 */
	public static TreeNode convert1(TreeNode root) {
		root = convert2(root);
		while (root.left != null) {
			root = root.left;
		}
		return root;
	}

	public static TreeNode convert2(TreeNode root) {
		if (root == null || (root.left == null) && (root.right == null))
			return root;
		TreeNode current = null;
		if (root.left != null)// 处理左子树
		{
			current = convert2(root.left);
			while (current.right != null)// 寻找最右节点
			{
				current = current.right;
			}
			current.right = root;// 把左子树右边与root相连
			root.left = current;
		}
		if (root.right != null) {// 处理右子树
			current = convert2(root.right);
			while (current.left != null) {
				current = current.left;
			}
			current.left = root;// 把右子树左边与root相连
			root.right = current;
		}
		return root;
	}

	// 5.2将二叉树变为有序的双向列表， 迭代解法
	public static TreeNode convertBST2DLL(TreeNode root) {
		if (root == null) {
			return null;
		}
		Stack<TreeNode> stack = new Stack<TreeNode>();
		TreeNode cur = root; // 指向当前处理节点
		TreeNode old = null; // 指向前一个处理的节点
		TreeNode head = null; // 链表头

		while (true) {
			while (cur != null) { // 先添加一个非空节点所有的左孩子到栈
				stack.push(cur);
				cur = cur.left;
			}

			if (stack.isEmpty()) {
				break;
			}

			// 因为此时已经没有左孩子了，所以输出栈顶元素
			cur = stack.pop();
			if (old != null) {
				old.right = cur;
			}
			if (head == null) { // /第一个节点为双向链表头节点
				head = cur;
			}

			old = cur; // 更新old
			cur = cur.right; // 准备处理右子树
		}

		return head;
	}

	/**
	 * 6.1求二叉树第K层的节点个数 递归解法： （1）如果二叉树为空或者k<1返回0 （2）如果二叉树不为空并且k==1，返回1
	 * （3）如果二叉树不为空且k>1，返回root左子树中k-1层的节点个数与root右子树k-1层节点个数之和
	 * 
	 * 求以root为根的k层节点数目 等价于 求以root左孩子为根的k-1层（因为少了root那一层）节点数目 加上
	 * 以root右孩子为根的k-1层（因为少了root那一层）节点数目
	 * 
	 * 所以遇到树，先把它拆成左子树和右子树，把问题降解
	 * 
	 */
	public static int getNodeNumKthLevelRec(TreeNode root, int k) {
		if (root == null || k < 1)
			return 0;
		if (k == 1)
			return 1;
		int numLeft = getNodeNumKthLevelRec(root.left, k - 1);
		int numRight = getNodeNumKthLevelRec(root.right, k - 1);
		return numLeft + numRight;
	}

	/**
	 * 7.1求二叉树中叶子节点的个数（递归）
	 */
	public static int getNodeNumLeafRec(TreeNode root) {
		if (root == null)
			return 0;
		if (root.left == null && root.right == null)
			return 1;
		return getNodeNumLeafRec(root.left) + getNodeNumLeafRec(root.right);
	}

	/**
	 * 8.1判断两棵二叉树是否相同的树。 递归解法： （1）如果两棵二叉树都为空，返回真 （2）如果两棵二叉树一棵为空，另一棵不为空，返回假
	 * （3）如果两棵二叉树都不为空，如果对应的左子树和右子树都同构返回真，其他返回假
	 */
	public boolean isSameRec(TreeNode t1, TreeNode t2) {
		if (t1 == null && t2 == null)
			return true;
		else if (t1 == null || t2 == null)
			return false;
		if (t1.val != t2.val)
			return false;
		boolean leftSame = isSameRec(t1.left, t2.left);
		boolean rightSame = isSameRec(t1.right, t2.right);
		return leftSame && rightSame;
	}

	/**
	 * 9.1判断二叉树是不是平衡二叉树 递归解法： （1）如果二叉树为空，返回真
	 * （2）如果二叉树不为空，如果左子树和右子树都是AVL树并且左子树和右子树高度相差不大于1，返回真，其他返回假
	 */
	public static boolean isAVLRec(TreeNode root) {
		if (root == null)
			return true;
		if (Math.abs(getDepthRec(root.left) - getDepthRec(root.right)) > 1) {
			return false;
		}
		return isAVLRec(root.left) && isAVLRec(root.right);
	}

	/**
	 * 10求二叉树的镜像 递归解法： （1）如果二叉树为空，返回空 （2）如果二叉树不为空，求左子树和右子树的镜像，然后交换左子树和右子树
	 */
	// 破坏原来的树，将原来的树改成其镜像
	public static TreeNode mirrorRec(TreeNode root) {
		if (root == null)
			return null;
		TreeNode left = mirrorRec(root.left);
		TreeNode right = mirrorRec(root.right);
		root.left = right;// 将新生成的又子树赋给左子树
		root.right = left;// 将新生成的左子树赋给又子树
		return root;
	}

	// 不破坏原来的，返回一个新镜像树
	public static TreeNode mirrorCopyRec(TreeNode root) {
		if (root == null)
			return null;
		TreeNode newNode = new TreeNode(root.val);
		newNode.left = mirrorCopyRec(root.right);
		newNode.right = mirrorCopyRec(root.left);
		return newNode;
	}

	// 判断两个树是否相互镜像
	public static boolean isMirrorRec(TreeNode t1, TreeNode t2) {
		if (t1 == null && t2 == null)
			return true;
		else if (t1 == null || t2 == null)
			return false;
		if (t1.val != t2.val)
			return false;// 如果两个树都为非空树则先比较根节点
		return isMirrorRec(t1.left, t2.right) && isMirrorRec(t1.right, t2.left);
	}

	/**
	 * 11求二叉树中两个节点的最低公共祖先节点 递归解法： （1）如果两个节点分别在根节点的左子树和右子树，则返回根节点
	 * （2）如果两个节点都在左子树，则递归处理左子树；如果两个节点都在右子树，则递归处理右子树
	 */
	// 方法一11.1：要调用下面的帮助方法findNodeRec（）
	public static TreeNode getLastCommonParentRec(TreeNode root, TreeNode n1, TreeNode n2) {
		if (findNodeRec(root.left, n1)) {
			if (findNodeRec(root.right, n2)) {
				return root;// 如果一个在左子树发现一个在又子树发现，则返回根节点
			} else {
				return getLastCommonParentRec(root.left, n1, n2);// 如果两个都在左子树发现则去左子树寻找公共祖先节点
			}

		} else {// 如果n1在右子树
			if (findNodeRec(root.left, n1)) {
				return root;
			} else {
				return getLastCommonParentRec(root.right, n1, n2);
			}
		}
	}

	// 帮助方法，判断一个节点是否在树里
	private static boolean findNodeRec(TreeNode root, TreeNode node) {
		if (root == null || node == null)
			return false;
		if (node == root)
			return true;
		boolean found = findNodeRec(root.left, node);
		if (!found) {
			found = findNodeRec(root.right, node);
		}
		return found;
	}

	// 方法二：11.2
	public static TreeNode getLastCommonParentRec2(TreeNode root, TreeNode n1, TreeNode n2) {
		if (root == null)
			return null;
		if (root.equals(n1) || root.equals(n2))
			return root;
		TreeNode commonInLeft = getLastCommonParentRec2(root.left, n1, n2);
		TreeNode commonInRight = getLastCommonParentRec2(root.right, n1, n2);
		if (commonInLeft != null && commonInRight != null)
			return root;
		if (commonInLeft != null) {
			return commonInLeft;
		} else {
			return commonInRight;
		}
	}

	/**
	 * 求二叉树中节点的最大距离 即二叉树中相距最远的两个节点之间的距离。 (distance / diameter) 递归解法：
	 * （1）如果二叉树为空，返回0，同时记录左子树和右子树的深度，都为0
	 * （2）如果二叉树不为空，最大距离要么是左子树中的最大距离，要么是右子树中的最大距离，
	 * 要么是左子树节点中到根节点的最大距离+右子树节点中到根节点的最大距离， 同时记录左子树和右子树节点中到根节点的最大距离。
	 * 
	 * http://www.cnblogs.com/miloyip/archive/2010/02/25/1673114.html
	 * 
	 * 计算一个二叉树的最大距离有两个情况:
	 * 
	 * 情况A: 路径经过左子树的最深节点，通过根节点，再到右子树的最深节点。 情况B: 路径不穿过根节点，而是左子树或右子树的最大距离路径，取其大者。
	 * 只需要计算这两个情况的路径距离，并取其大者，就是该二叉树的最大距离
	 */
	private static class Result {
		int maxDistance;
		int maxDepth;

		public Result() {

		}

		public Result(int maxDistance, int maxDepth) {
			this.maxDistance = maxDistance;
			this.maxDepth = maxDepth;
		}
	}

	public static Result getMaxDistanceRec(TreeNode root) {
		if (root == null) {
			Result empty = new Result(0, -1);
			return empty;
		}
		Result lmd = getMaxDistanceRec(root.left);// 左子树最大深度
		Result rmd = getMaxDistanceRec(root.right);// 右子树最大深度
		Result res = new Result();
		res.maxDepth = Math.max(lmd.maxDepth, rmd.maxDepth) + 1;// 当前最大深度
		res.maxDistance = Math.max(lmd.maxDepth + rmd.maxDepth, Math.max(lmd.maxDistance, rmd.maxDistance));// 前面一项为情况A,后面一项为情况B
		return res;
	}
}
